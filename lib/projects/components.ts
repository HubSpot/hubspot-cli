import path from 'path';
import fs from 'fs';
import { Collision } from '@hubspot/local-dev-lib/types/Archive';
import {
  coerceToValidUid,
  metafileExtension,
} from '@hubspot/project-parsing-lib';
import { uiLogger } from '../ui/logger.js';
import { AppKey } from '@hubspot/project-parsing-lib/src/lib/constants.js';
import { lib } from '../../lang/en.js';

// Handles a collision between component source files
export function handleComponentCollision({ dest, src, collisions }: Collision) {
  const hsMetaFiles: string[] = [];
  const packageJsonFiles: string[] = [];
  const sourceFiles: string[] = [];

  collisions.forEach(collision => {
    if (collision.endsWith(metafileExtension)) {
      hsMetaFiles.push(collision);
    } else if (path.parse(collision).base === 'package.json') {
      packageJsonFiles.push(collision);
    } else {
      sourceFiles.push(collision);
    }
  });

  const sourceFilenameMapping: Record<string, string> = sourceFiles.reduce(
    (acc, filename) => {
      const { name, ext, dir } = path.parse(filename);
      return {
        ...acc,
        [filename]: path.join(dir, `${name}-${Date.now()}${ext}`),
      };
    },
    {}
  );

  const metafileExtensionPrefix = path.parse(metafileExtension).name;
  const metaFilenameMapping: Record<string, string> = hsMetaFiles.reduce(
    (acc, filename) => {
      const { name, dir } = path.parse(filename);
      return {
        ...acc,
        [filename]: path.join(
          dir,
          `${name.replace(metafileExtensionPrefix, '')}-${Date.now()}${metafileExtension}`
        ),
      };
    },
    {}
  );

  // Update the metafiles that might contain references to the old filenames
  hsMetaFiles.forEach(file => {
    updateMetaFile({
      dest,
      src,
      file,
      sourceFilenameMapping,
      metaFilenameMapping,
    });
  });

  // Copy the renamed files into their new destination location
  Object.entries(sourceFilenameMapping).forEach(([key, value]) => {
    fs.copyFileSync(path.join(src, key), path.join(dest, value));
  });

  if (packageJsonFiles.length) {
    handlePackageJsonCollisions(dest, src, packageJsonFiles);
  }
}

function updateMetaFile({
  dest,
  src,
  file,
  sourceFilenameMapping,
  metaFilenameMapping,
}: {
  dest: string;
  src: string;
  file: string;
  sourceFilenameMapping: Record<string, string>;
  metaFilenameMapping: Record<string, string>;
}) {
  let text = fs.readFileSync(path.join(src, file), 'utf-8');
  Object.entries(sourceFilenameMapping).forEach(([key, value]) => {
    const { base: oldFileName } = path.parse(key);
    const { base: newFileName } = path.parse(value);
    text = text.replace(oldFileName, newFileName);
  });
  fs.writeFileSync(path.join(dest, metaFilenameMapping[file]), text);
}

function handlePackageJsonCollisions(
  dest: string,
  src: string,
  packageJsonFiles: string[]
) {
  packageJsonFiles.forEach(file => {
    const existingPackageJsonContents = JSON.parse(
      fs.readFileSync(path.join(dest, file), 'utf-8')
    );

    const newPackageJsonContents = JSON.parse(
      fs.readFileSync(path.join(src, file), 'utf-8')
    );
    existingPackageJsonContents.dependencies = {
      ...newPackageJsonContents.dependencies,
      ...existingPackageJsonContents.dependencies,
    };

    existingPackageJsonContents.devDependencies = {
      ...newPackageJsonContents.devDependencies,
      ...existingPackageJsonContents.devDependencies,
    };

    fs.writeFileSync(
      path.join(dest, file),
      JSON.stringify(existingPackageJsonContents, null, 2)
    );
  });
}

export function updateHsMetaFilesWithAutoGeneratedFields(
  projectName: string,
  hsMetaFilePaths: string[],
  existingUids: string[] = []
) {
  uiLogger.log('');
  uiLogger.log(lib.projects.updateHsMetaFilesWithAutoGeneratedFields.header);
  for (const hsMetaFile of hsMetaFilePaths) {
    const component = JSON.parse(fs.readFileSync(hsMetaFile).toString());

    let uid =
      coerceToValidUid(`${component.type}-${projectName}`) || component.uid;
    if (existingUids.includes(uid)) {
      uid =
        coerceToValidUid(`${component.type}-${Date.now()}-${projectName}`) ||
        component.uid;
    }

    component.uid = uid;

    if (component.type === AppKey && component.config) {
      component.config.name = `${projectName}-Application`;
      uiLogger.log(
        lib.projects.updateHsMetaFilesWithAutoGeneratedFields.applicationLog(
          component.type,
          component.uid,
          component.config.name
        )
      );
    } else {
      uiLogger.log(
        lib.projects.updateHsMetaFilesWithAutoGeneratedFields.componentLog(
          component.type,
          component.uid
        )
      );
    }

    fs.writeFileSync(hsMetaFile, JSON.stringify(component, null, 2));
  }
  uiLogger.log('');
}
